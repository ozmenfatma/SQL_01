CREATE TABLE personel
(
id int,
isim varchar(50),  sehir varchar(50),  maas int,  
sirket varchar(20)
);

INSERT INTO personel VALUES(123456789, 'Ali Yilmaz', 'Istanbul', 5500, 'Honda');  
INSERT INTO personel VALUES(234567890, 'Veli Sahin', 'Istanbul', 4500, 'Toyota');  
INSERT INTO personel VALUES(345678901, 'Mehmet Ozturk', 'Ankara', 3500, 'Honda');  
INSERT INTO personel VALUES(456789012, 'Mehmet Ozturk', 'Izmir', 6000, 'Ford');  
INSERT INTO personel VALUES(567890123, 'Mehmet Ozturk', 'Ankara', 7000, 'Tofas');  
INSERT INTO personel VALUES(456789012, 'Veli Sahin', 'Ankara', 4500, 'Ford');  
INSERT INTO personel VALUES(123456710, 'Hatice Sahin', 'Bursa', 4500, 'Honda');



delete from personel

--1)Isme gore toplam maaslari bulun
select isim, sum(maas) from personel group by isim

--Sirketlere gore maasi 5000 liradan fazla olan personel sayisini bulun
SELECT sirket, COUNT(*) AS calisan_sayisini_saydir FROM personel
WHERE maas>5000
GROUP BY sirket;

-- 									HAVING CLAUSE
-- HAVING, AGGREGATE FUNCTION’lar ile birlikte kullanilan FILTRELEME komutudur.. having group byden sonra kullanilir
/*
	Having komutu yalnizca GROUP BY komutu ile kullanilir
	Eger gruplamadan sonra bir sart varsa HAVING komutu kullanilir. where ==>aggregriate methoduyla where kullanamayiz
*/

--1) Her sirketin MIN maaslarini eger 4000’den buyukse goster

select sirket,min(maas)FROM personel group by sirket
having min(maas) >4000 

-- 2) Ayni isimdeki kisilerin aldigi toplam gelir 10000 liradan fazla ise ismi
-- ve toplam maasi gosteren sorgu yaziniz

select isim , sum(maas) from personel 
group by isim
HAVING sum(maas)>10000

-- Eger bir sehirde calisan personel sayisi 1’den coksa sehir ismini ve personel sayisini veren sorgu yaziniz

select sehir, count(isim) as toplam_personel_sayisi
from personel
group by  sehir
HAVING count(isim) >1

-- 4) Eger bir sehirde alinan MAX maas 5000’den dusukse
-- sehir ismini ve MAX maasi veren sorgu yaziniz

select sehir , max(maas) from personel 
group by sehir 
HAVING max(maas)<5000


--						UNION OPERATOR
-- Iki farkli sorgulamanin sonucunu birlestiren islemdir. Secilen Field SAYISI ve DATA TYPE’i
-- ayni olmalidir.

-- 1) Maasi 4000’den cok olan isci isimlerini ve 5000 liradan fazla maas alinan
-- sehirleri gosteren sorguyu yaziniz
select * from personel;

select sehir isci_veya_sehir_ismi , maas 
from personel where maas>5000
UNION
select  isim, maas from personel where maas>4000

-- 2) Mehmet Ozturk ismindeki kisilerin aldigi maaslari ve Istanbul’daki personelin maaslarini
-- bir tabloda gosteren sorgu yaziniz

select isim as isci_veya_sehir_ismi ,maas
from personel
where isim='Mehmet Ozturk'
UNION
select isim  as isci_veya_sehir_ismi ,maas
from personel
where sehir='Istanbul'
ORDER BY maas DESC



-- 								UNION OPERATOR
-- 						2 Tablodan Data Birlestirme

drop table personel_bilgi 

CREATE TABLE personel
(
id int,
isim varchar(50),  
sehir varchar(50), 
maas int,  
sirket varchar(20),
CONSTRAINT personel_pk PRIMARY KEY (id) )
	
INSERT INTO personel VALUES(123456789, 'Ali Yilmaz', 'Istanbul', 5500, 'Honda');  
INSERT INTO personel VALUES(234567890, 'Veli Sahin', 'Istanbul', 4500, 'Toyota');  
INSERT INTO personel VALUES(345678901, 'Mehmet Ozturk', 'Ankara', 3500, 'Honda');  
INSERT INTO personel VALUES(456789012, 'Mehmet Ozturk', 'Izmir', 6000, 'Ford');  
INSERT INTO personel VALUES(567890123, 'Mehmet Ozturk', 'Ankara', 7000, 'Tofas');  
INSERT INTO personel VALUES(456715012, 'Veli Sahin', 'Ankara', 4500, 'Ford');  
INSERT INTO personel VALUES(123456710, 'Hatice Sahin', 'Bursa', 4500, 'Honda');

CREATE TABLE personel_bilgi  (
id int,
tel char(10) UNIQUE ,  
cocuk_sayisi int,
CONSTRAINT personel_bilgi_fk FOREIGN KEY (id) REFERENCES personel(id)
);

INSERT INTO personel_bilgi VALUES(123456789, '5302345678', 5);  
INSERT INTO personel_bilgi VALUES(234567890, '5422345678', 4);
INSERT INTO personel_bilgi VALUES(345678901, '5354561245', 3);
INSERT INTO personel_bilgi VALUES(456789012, '5411452659', 3);
INSERT INTO personel_bilgi VALUES(567890123, '5551253698', 2);
INSERT INTO personel_bilgi VALUES(456789012, '5524578574', 2);
INSERT INTO personel_bilgi VALUES(123456710, '5537488585', 1);

select * from personel
select * from personel_bilgi

-- id’si 123456789 olan personelin    Personel tablosundan sehir ve maasini, 
-- personel_bilgi  tablosundan da tel ve cocuk sayisini yazdirin

select sehir as sehir_ve_tel,maas as maas_cocuk_sayisi from personel where id=123456789
union
select tel,cocuk_sayisi from personel_bilgi where id=123456789

--UNION ALL
/*
Union tekrarli verileri teke düşürür ve bize o şekilde sonuç verir
Union All ise tekrarli verilerle birlikte tün sorguları getirir
*/

--/UNION islemi 2 veya daha cok SELECT isleminin sonuc KUMELERINI birlestirmek icin kullanilir, Ayni kayit birden fazla olursa, sadece bir tanesini alir.
--UNION ALL ise tekrarli elemanlari, tekrar sayisinca yazar.*/

--NOT:
--1)Her 2 QUERY’den elde edeceginiz tablolarin sutun sayilari esit olmali 2)Alt alta gelecek sutunlarin data type’lari ayni olmali

--Personel tablosundada maasi 5000’den az olan tum isimleri ve maaslari bulunuz

select isim,maas from personel where maas < 5000
UNION ALL
select isim,maas from personel where maas < 5000

/*---INTERSECT
SQL INTERSECT operatörü, 2 veya daha fazla SELECT ifadesinin sonuçlarını döndürmek için kullanılır.
Ancak, yalnızca tüm sorgular veya veri kümeleri tarafından seçilen satırları döndürür. 
Bir sorguda bir kayıt varsa ve diğerinde yoksa, INTERSECT sonuçlarından çıkarılacaktır.*/

/*
Farkli iki tablodaki ortak verileri INTERSECT komutu ile getirebiliriz
*/

--Personel tablosundan Istanbul veya Ankara’da calisanlarin id’lerini yazdir
--Personel_bilgi tablosundan 2 veya 3 cocugu olanlarin id lerini yazdirin
--Iki sorguyu INTERSECT ile birlestirin

select id as sehirismi_AnkaraIstanbul_cocuksayisi_2ve3 from personel where sehir in ('Istanbul','Ankara')
INTERSECT
select id from personel_bilgi where cocuk_sayisi in (2,3)

-- 1) Maasi 4800’den az olanlar veya 5000’den cok olanlarin id’lerini listeleyin
-- 2) Personel_bilgi tablosundan 2 veya 3 cocugu olanlarin id lerini yazdirin
-- 3) Iki sorguyu INTERSECT ile birlestirin

select id from personel where maas not between 4800 and 5000
INTERSECT
select id from personel_bilgi where cocuk_sayisi in(2,3)

-- Honda,Ford ve Tofas’ta calisan ortak isimde personel varsa listeleyin

SELECT isim FROM personel where sirket='Honda'
INTERSECT
select isim from personel where sirket='Ford'
INTERSECT
select isim from personel where sirket='Tofas'

/*
SQL EXCEPT yan tümcesi/operatörü, iki SELECT deyimini birleştirmek için kullanılır ve 
ilk SELECT deyiminden ikinci SELECT deyimi tarafından döndürülmeyen satırları döndürür. 
Bu, EXCEPT'in yalnızca ikinci SELECT deyiminde bulunmayan satırları döndürdüğü anlamına gelir.
UNION işlecinde olduğu gibi, EXCEPT işlecini kullanırken de aynı kurallar geçerlidir. 
MySQL, EXCEPT operatörünü desteklemiyor.
*/
/*
iki sorgulamada harici bir sorgulama istenirse EXCEPT komutu kullanilir
 */
 
--5000’den az maas alip Honda’da calismayanlari yazdirin

SELECT isim,sirket FROM personel WHERE maas<5000
EXCEPT
SELECT isim,sirket FROM personel WHERE sirket='Honda'